import argparse
import json
import logging
import os
import shutil
import subprocess
import sys
import textwrap
from uuid import uuid4

logging.basicConfig(level=logging.INFO)
log = logging.getLogger()


def write_config(args):
    
    # open path to write config file at
    path = "adam-preprocessing-%s.config" % (str(uuid4()))
    fp = open(path, 'w')

    # generate config
    config = textwrap.dedent('''# ADAM preprocessing pipeline configuration file; autogenerated, do not modify!
    num-nodes:
    master-ip:
    dbsnp: %s
    memory: %s
    run-local: true
    local-dir: %s
    native-adam-path: /opt/cgl-docker-lib/adam
    ''' % (args.known_sites, args.memory, args.output))

    # write config to file
    print >> fp, config

    # flush and close file
    fp.flush()
    fp.close()

    # return config file name
    return path


def call_pipeline(args):
    
    # get uuid and make a work directory
    uuid = 'toil-adam-' + str(uuid4())
    work_dir = os.path.join('/tmp/', uuid)
    if not os.path.isdir(work_dir):
        os.makedirs(work_dir)

    # write config file locally
    conf = write_config(args)

    # set python path and build command
    os.environ['PYTHONPATH'] = '/opt/adam-pipeline/src'
    command = ['python', '-m', 'toil_scripts.adam_pipeline.adam_preprocessing',
               'run',
               os.path.join(work_dir, 'jobStore'),
               '--retryCount', '1',
               '--output-dir', os.path.dirname(args.output),
               '--workDir', work_dir,
               '--config', conf,
               '--sample', args.sample,
               '--defaultDisk', '0',
               '--defaultMemory', '%sG' % args.memory,
               '--maxDisk', '0']
    
    # run the command and clean up
    try:
        subprocess.check_call(command)
    finally:
        stat = os.stat(args.output)
        subprocess.check_call(['chown', '-R', '{}:{}'.format(stat.st_uid, stat.st_gid), args.output])
        shutil.rmtree(work_dir)


def main():
    """
    Please see the complete documentation located at:
    https://github.com/BD2KGenomics/cgl-docker-lib/tree/master/adam-pipeline
    or in the container at:
    /opt/adam-pipeline/README.md

    All samples and inputs must be reachable via Docker "-v" mount points and use
    the Destination path prefix.
    """
    # Define argument parser for
    parser = argparse.ArgumentParser(description=main.__doc__, formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('--known-sites', required=True,
                        help='Absolute path to VCF file with known SNPs.')
    parser.add_argument('--sample', required=True,
                        help='Absolute path to input SAM/BAM file.')
    parser.add_argument('--output', required=True,
                        help='Absolute path to write output SAM/BAM file at.')
    parser.add_argument('--memory', required=True,
                        help='Java formatted memory string for allocating memory for Spark.')
    args = parser.parse_args()

    # call the pipeline
    call_pipeline(args)


class IllegalArgumentException(Exception):
    pass


if __name__ == '__main__':
    main()
